// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: ligato/configurator/configurator.proto

package configurator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfiguratorService_Get_FullMethodName    = "/ligato.configurator.ConfiguratorService/Get"
	ConfiguratorService_Update_FullMethodName = "/ligato.configurator.ConfiguratorService/Update"
	ConfiguratorService_Delete_FullMethodName = "/ligato.configurator.ConfiguratorService/Delete"
	ConfiguratorService_Dump_FullMethodName   = "/ligato.configurator.ConfiguratorService/Dump"
	ConfiguratorService_Notify_FullMethodName = "/ligato.configurator.ConfiguratorService/Notify"
)

// ConfiguratorServiceClient is the client API for ConfiguratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConfiguratorService provides basic operations for managing configuration
// and monitoring actual state.
type ConfiguratorServiceClient interface {
	// Get is used for listing desired config.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Update is used for updating desired config.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete is used for deleting desired config.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Dump is used for dumping running config.
	Dump(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*DumpResponse, error)
	// Notify is used for subscribing to notifications.
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotifyResponse], error)
}

type configuratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfiguratorServiceClient(cc grpc.ClientConnInterface) ConfiguratorServiceClient {
	return &configuratorServiceClient{cc}
}

func (c *configuratorServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ConfiguratorService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configuratorServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ConfiguratorService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configuratorServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ConfiguratorService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configuratorServiceClient) Dump(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*DumpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DumpResponse)
	err := c.cc.Invoke(ctx, ConfiguratorService_Dump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configuratorServiceClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotifyResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConfiguratorService_ServiceDesc.Streams[0], ConfiguratorService_Notify_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotifyRequest, NotifyResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfiguratorService_NotifyClient = grpc.ServerStreamingClient[NotifyResponse]

// ConfiguratorServiceServer is the server API for ConfiguratorService service.
// All implementations must embed UnimplementedConfiguratorServiceServer
// for forward compatibility.
//
// ConfiguratorService provides basic operations for managing configuration
// and monitoring actual state.
type ConfiguratorServiceServer interface {
	// Get is used for listing desired config.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Update is used for updating desired config.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete is used for deleting desired config.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Dump is used for dumping running config.
	Dump(context.Context, *DumpRequest) (*DumpResponse, error)
	// Notify is used for subscribing to notifications.
	Notify(*NotifyRequest, grpc.ServerStreamingServer[NotifyResponse]) error
	mustEmbedUnimplementedConfiguratorServiceServer()
}

// UnimplementedConfiguratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfiguratorServiceServer struct{}

func (UnimplementedConfiguratorServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedConfiguratorServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedConfiguratorServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConfiguratorServiceServer) Dump(context.Context, *DumpRequest) (*DumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dump not implemented")
}
func (UnimplementedConfiguratorServiceServer) Notify(*NotifyRequest, grpc.ServerStreamingServer[NotifyResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedConfiguratorServiceServer) mustEmbedUnimplementedConfiguratorServiceServer() {}
func (UnimplementedConfiguratorServiceServer) testEmbeddedByValue()                             {}

// UnsafeConfiguratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfiguratorServiceServer will
// result in compilation errors.
type UnsafeConfiguratorServiceServer interface {
	mustEmbedUnimplementedConfiguratorServiceServer()
}

func RegisterConfiguratorServiceServer(s grpc.ServiceRegistrar, srv ConfiguratorServiceServer) {
	// If the following call panics, it indicates UnimplementedConfiguratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfiguratorService_ServiceDesc, srv)
}

func _ConfiguratorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfiguratorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfiguratorService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfiguratorServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfiguratorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfiguratorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfiguratorService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfiguratorServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfiguratorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfiguratorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfiguratorService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfiguratorServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfiguratorService_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfiguratorServiceServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfiguratorService_Dump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfiguratorServiceServer).Dump(ctx, req.(*DumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfiguratorService_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotifyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfiguratorServiceServer).Notify(m, &grpc.GenericServerStream[NotifyRequest, NotifyResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConfiguratorService_NotifyServer = grpc.ServerStreamingServer[NotifyResponse]

// ConfiguratorService_ServiceDesc is the grpc.ServiceDesc for ConfiguratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfiguratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ligato.configurator.ConfiguratorService",
	HandlerType: (*ConfiguratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ConfiguratorService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ConfiguratorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfiguratorService_Delete_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _ConfiguratorService_Dump_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _ConfiguratorService_Notify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ligato/configurator/configurator.proto",
}

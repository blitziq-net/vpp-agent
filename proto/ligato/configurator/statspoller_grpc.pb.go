// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: ligato/configurator/statspoller.proto

package configurator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatsPollerService_PollStats_FullMethodName = "/ligato.configurator.StatsPollerService/PollStats"
)

// StatsPollerServiceClient is the client API for StatsPollerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StatsPollerService provides operations for collecting statistics.
type StatsPollerServiceClient interface {
	// PollStats is used for polling stats with specific period and number of pollings.
	PollStats(ctx context.Context, in *PollStatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PollStatsResponse], error)
}

type statsPollerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsPollerServiceClient(cc grpc.ClientConnInterface) StatsPollerServiceClient {
	return &statsPollerServiceClient{cc}
}

func (c *statsPollerServiceClient) PollStats(ctx context.Context, in *PollStatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PollStatsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StatsPollerService_ServiceDesc.Streams[0], StatsPollerService_PollStats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PollStatsRequest, PollStatsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StatsPollerService_PollStatsClient = grpc.ServerStreamingClient[PollStatsResponse]

// StatsPollerServiceServer is the server API for StatsPollerService service.
// All implementations must embed UnimplementedStatsPollerServiceServer
// for forward compatibility.
//
// StatsPollerService provides operations for collecting statistics.
type StatsPollerServiceServer interface {
	// PollStats is used for polling stats with specific period and number of pollings.
	PollStats(*PollStatsRequest, grpc.ServerStreamingServer[PollStatsResponse]) error
	mustEmbedUnimplementedStatsPollerServiceServer()
}

// UnimplementedStatsPollerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatsPollerServiceServer struct{}

func (UnimplementedStatsPollerServiceServer) PollStats(*PollStatsRequest, grpc.ServerStreamingServer[PollStatsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PollStats not implemented")
}
func (UnimplementedStatsPollerServiceServer) mustEmbedUnimplementedStatsPollerServiceServer() {}
func (UnimplementedStatsPollerServiceServer) testEmbeddedByValue()                            {}

// UnsafeStatsPollerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsPollerServiceServer will
// result in compilation errors.
type UnsafeStatsPollerServiceServer interface {
	mustEmbedUnimplementedStatsPollerServiceServer()
}

func RegisterStatsPollerServiceServer(s grpc.ServiceRegistrar, srv StatsPollerServiceServer) {
	// If the following call panics, it indicates UnimplementedStatsPollerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatsPollerService_ServiceDesc, srv)
}

func _StatsPollerService_PollStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PollStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsPollerServiceServer).PollStats(m, &grpc.GenericServerStream[PollStatsRequest, PollStatsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StatsPollerService_PollStatsServer = grpc.ServerStreamingServer[PollStatsResponse]

// StatsPollerService_ServiceDesc is the grpc.ServiceDesc for StatsPollerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsPollerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ligato.configurator.StatsPollerService",
	HandlerType: (*StatsPollerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollStats",
			Handler:       _StatsPollerService_PollStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ligato/configurator/statspoller.proto",
}
